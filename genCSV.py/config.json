{
    "file_endings": {
        "cadence": [
            "post_route_hold_optDesign.summary",
            "block_stats_signoff.rpt",
            "signoff.power.rpt",
            "apr_run.log",
            "*.final.all_violators.rpt",
            "sta.max.log",
            "drc.sum",
            "*.qor.rpt",
            "lvs.report"
        ],
        "synopsys": [
            "*.fill.qor.rpt",
            "*.fill.physical.rpt",
            "*.cts.clock_tree.rpt",
            "icc.log",
            "*.min.qor.rpt",
            "*.inc_compile.qor.rpt",
            "dc.log",
            "*.link.rpt",
            "*.max.qor.rpt",
            "*.run_time.rpt",
            "*.noise.qor.rpt",
            "*.power.power.rpt",
            "*.LAYOUT_ERRORS",
            "Final_Report.txt",
            "drc_IPall.dp.log",
            "denall_reuse.dp.log",
            "trclvs.dp.log",
            "drcd.dp.log"
        ]
    },
    "default_list_of_metrics":[
          "Apr_Shorts", "Apr_Memory", "syn_Cell_Count", "Testcase_Name",
          "DateTime", "Tool", "syn_Cell_Count", "syn_REG2REG_critical_path_len", "syn_REG2REG_total_hold_viol",
          "syn_REG2REG_total_neg_slack", "syn_REG2REG_worst_hold_violation", "syn_REG2REG_worst_setup_viol",
          "syn_cpu_runtime", "syn_max_cap_viols", "syn_max_fanout_viols", "syn_max_trans_viols", "syn_pvt",
          "syn_tool_version", "apr_Cell_Count", "apr_DRC", "apr_Memory", "apr_REG2REG_critical_path_len",
          "apr_REG2REG_total_hold_viol", "apr_REG2REG_total_neg_slack", "apr_REG2REG_worst_hold_violation",
          "apr_REG2REG_worst_setup_viol", "apr_Shorts", "apr_cpu_runtime", "apr_cts_max_global_skew",
          "apr_max_cap_viols", "apr_max_fanout_viols", "apr_max_trans_viols", "apr_pvt", "apr_tool_version",
          "apr_utilization", "drc_IPall", "drc_IPall_Peak_Memory", "drc_IPall_Runtime", "drc_denall",
          "drc_denall_reuse_Peak_Memory", "drc_denall_reuse_Runtime", "drc_drcd", "drc_drcd_Peak_Memory",
          "drc_drcd_Runtime", "drc_tool_version", "drc_total_viols", "drc_trclvs", "drc_trclvs_Peak_Memory",
          "drc_trclvs_Runtime", "pv_max_pvt", "pv_max_tttt_Cell_Count", "pv_max_tttt_REG2REG_critical_path_len",
          "pv_max_tttt_REG2REG_total_neg_slack", "pv_max_tttt_REG2REG_worst_setup_viol", "pv_max_tttt_run_time",
          "pv_max_tttt_tool_version", "pv_min_pvt", "pv_min_tttt_Cell_Count",
          "pv_min_tttt_REG2REG_critical_path_len", "pv_min_tttt_REG2REG_total_neg_slack",
          "pv_min_tttt_REG2REG_worst_setup_viol", "pv_min_tttt_run_time", "pv_min_tttt_tool_version",
          "pv_power_pvt", "pv_power_tttt_internal", "pv_power_tttt_leakage", "pv_power_tttt_run_time",
          "pv_power_tttt_switch", "pv_power_tttt_total", "pv_noise_pvt", "pv_noise_tttt_Cell_Count",
          "pv_noise_tttt_max_fanout_viols", "pv_noise_tttt_max_trans_viols", "pv_noise_tttt_run_time",
          "pv_noise_tttt_tool_version", "apr_Power_Internal","apr_Power_Leakage","apr_Power_Switching",
          "apr_Power_Total","apr_REG2REG_TNS","apr_REG2REG_WNS","apr_Run_Time","calibre_HV",
          "calibre_denall_reuse","calibre_drcc","calibre_gden","calibre_lvs","sta_Cell_Count","sta_Run_Time",
          "sta_max_cap_viols","sta_max_trans_viols","sta_max_tttt_REG2REG_TNS",
          "sta_max_tttt_REG2REG_worst_setup_viols","sta_min_tttt_REG2REG_TNS",
          "sta_min_tttt_REG2REG_worst_hold_viols","syn_Cell_Count","syn_REG2REG_TNS","syn_REG2REG_WNS","apr_DRC_Violations"

    ],
	"Search_Key":{
      "Order":{
		"default":"3",
        "1":"*.stage/testcase/testcase/stage",
        "2":"*.stage/testcase/stage",
        "3":"*testcase/",
        "4": ".*/YYYY-MM-DD/runs/d**/testcase"
    }
    },
    "line_keywords": {
        "cadence": { 
          "post_route_hold_optDesign.summary":{
            "found_wns": {
                    "found_section_reg_exp": {
                        "end_line": "none",
                        "begin_line": "none"
                    },
                    "metric_reg_exp": ".*(WNS)[^\\|]*\\|[^\\|]*\\|[\\s]*([-\\d\\.]*).*",
                    "metric_name": "apr_REG2REG_WNS",
                    "stage": "none",
                    "directory": "none"
              },
              "found_tns": {
                    "found_section_reg_exp": {
                        "end_line": "none",
                        "begin_line": "none"
                    },
                    "metric_reg_exp": ".*(TNS)[^\\|]*\\|[^\\|]*\\|[\\s]*([-\\d\\.]*).*",
                    "metric_name": "apr_REG2REG_TNS",
                    "stage": "none",
                    "directory": "none"
              },
              "found_max_cap": {
                    "found_section_reg_exp": {
                        "end_line": "none",
                        "begin_line": "none"
                    },
                    "metric_reg_exp": ".*(max_cap)[^\\|]*\\|[\\s]*([-\\d\\.]*).*\\|.*",
                    "metric_name": "apr_max_cap_viols",
                    "stage": "none",

                    "directory": "none"
              },
              "found_max_trans": {
                    "found_section_reg_exp": {
                        "end_line": "none",
                        "begin_line": "none"
                    },
                    "metric_reg_exp": ".*(max_tran)[^\\|]*\\|[\\s]*([-\\d\\.]*).*\\|.*",
                    "metric_name": "apr_max_trans_viols",
                    "stage": "none",
                    "directory": "none"
              }
          },
            "block_stats_signoff.rpt":{
              "found_util": {
                    "found_section_reg_exp": {
                        "end_line": "none",
                        "begin_line": "none"
                    },
                    "metric_reg_exp": "(Density[\\s]*):+[\\s]*([-\\d\\.]*).*",
                    "metric_name": "apr_utilization",
                    "stage": "none",
                    "directory": "none"
              },
              "found_cell_count": {
                    "found_section_reg_exp": {
                        "end_line": "none",
                        "begin_line": "none"
                    },
                    "metric_reg_exp": "(stdcell[\\s]*count[\\s]*):+[\\s]*([-\\d\\.]*).*",
                    "metric_name": "apr_Cell_Count",
                    "stage": "none",
                    "directory": "none"
              }
            },
            "signoff.power.rpt":{
              "found_apr_power_internal": {
                    "found_section_reg_exp": {
                        "end_line": "none",
                        "begin_line": "none"
                    },
                    "metric_reg_exp": "(Total[\\s]*Internal[\\s]*Power[\\s]*):+[\\s]*([-\\d\\.]*).*",
                    "metric_name": "apr_Power_Internal",
                    "stage": "none",
                    "directory": "none"
            },
            "found_apr_power_switching": {
                    "found_section_reg_exp": {
                        "end_line": "none",
                        "begin_line": "none"
                    },
                    "metric_reg_exp": "(Total[\\s]*Switching[\\s]*Power[\\s]*):+[\\s]*([-\\d\\.]*).*",
                    "metric_name": "apr_Power_Switching",
                    "stage": "none",
                    "directory": "none"
            },
            "found_apr_power_leakage": {
                    "found_section_reg_exp": {
                        "end_line": "none",
                        "begin_line": "none"
                    },
                    "metric_reg_exp": "(Total[\\s]*Leakage[\\s]*Power[\\s]*):+[\\s]*([-\\d\\.]*).*",
                    "metric_name": "apr_Power_Leakage",
                    "stage": "none",
                    "directory": "none"
            },
            "found_apr_power_total": {
                    "found_section_reg_exp": {
                        "end_line": "none",
                        "begin_line": "none"
                    },
                    "metric_reg_exp": "(Total[\\s]*Power[\\s]*):+[\\s]*([-\\d\\.]*).*",
                    "metric_name": "apr_Power_Total",
                    "stage": "none",
                    "directory": "none"
            }
            },
            "apr_run.log":{
              "found_apr_drc_viol": {
                    "found_section_reg_exp": {
                        "end_line": "none",
                        "begin_line": "none"
                    },
                    "metric_reg_exp": "(Total[\\s]*number[\\s]*of[\\s]*DRC[\\s]*violations):+[\\s]*([-\\d\\.]*).*",
                    "metric_name": "apr_DRC_Violations",
                    "stage": "none",
                    "directory": "none"
            },
            "found_apr_run_time": {
                    "found_section_reg_exp": {
                        "end_line": "none",
                        "begin_line": "none"
                    },
                    "metric_reg_exp": ".*(Ending[\\s]*\"Encounter\"[\\s]*\\(totcpu=[\\s]*)([-\\d\\.\\:]*).*",
                    "metric_name": "apr_Run_Time",
                    "stage": "none",
                    "directory": "none"
            }
            },
            ".final.all_violators.rpt":{
              "found_syn_max_trans": {
                    "found_section_reg_exp": {
                        "end_line": "none",
                        "begin_line": "none"
                    },
                    "metric_reg_exp": ".*(Max_transition[\\s]*design[\\s]*rule:[\\s]*)([-\\d\\.]*).*",
                    "metric_name": "syn_max_trans_viols",
                    "stage": "none",
                    "directory": "none"
            },
            "found_syn_max_cap": {
                    "found_section_reg_exp": {
                        "end_line": "none",
                        "begin_line": "none"
                    },
                    "metric_reg_exp": ".*(Max_capacitance[\\s]*design[\\s]*rule:[\\s]*)([-\\d\\.]*).*",
                    "metric_name": "syn_max_cap_viols",
                    "stage": "none",
                    "directory": "none"
            },
            "found_syn_max_fanout_viols": {
                    "found_section_reg_exp": {
                        "end_line": "none",
                        "begin_line": "none"
                    },
                    "metric_reg_exp": ".*(Max_fanout[\\s]*design[\\s]*rule:*)[\\D]*([-\\d\\.]*).*",
                    "metric_name": "syn_max_fanout_viols",
                    "stage": "none",
                    "directory": "none"
            }
            },
            "sta.max.log":{
              "found_sta_run_time": {
                    "found_section_reg_exp": {
                        "end_line": "none",
                        "begin_line": "none"
                    },
                    "metric_reg_exp": ".*(Ending[\\s]*\"Tempus[\\s]*Timing[\\s]*Signoff[\\s]*Solution\"[\\s]*\\(totcpu=)([-\\d\\.\\:]*).*",
                    "metric_name": "sta_Run_Time",
                    "stage": "none",
                    "directory": "none"
            }
            },
            "drc.sum":{},
            ".qor.rpt":{},
            "lvs.report":{}
        },
        "synopsys": {
            ".LAYOUT_ERRORS": {},
            ".fill.physical.rpt": {},
            ".inc_compile.qor.rpt": {
                "found_max_cap_vi": {
                    "found_section_reg_exp": {
                        "end_line": "none",
                        "begin_line": "none"
                    },
                    "metric_reg_exp": "(Max[\\s]*Cap[\\s]*Violations[\\s]*):+[\\s]*([-\\d\\.]*).*",
                    "metric_name": "syn_max_cap_viols",
                    "stage": "none",
                    "directory": "none"
                },
                "found_cell_count": {
                    "found_section_reg_exp": {
                        "end_line": "none",
                        "begin_line": "none"
                    },
                    "metric_reg_exp": "(leaf[\\s]*Cell[\\s]*Count[\\s]*):+[\\s]*(-*[\\d]+[\\.]*[\\d]*).*",
                    "metric_name": "syn_Cell_Count",
                    "stage": "none",
                    "directory": "none"
                },
                "found_worst_hold_viol": {
                    "metric_reg_exp": "(Worst[\\s]*hold[\\s]*violation[\\s]*):+[\\s]*([-\\d\\.]*).*",
                    "metric_name": "syn_REG2REG_worst_hold_violation",
                    "found_section_reg_exp": {
                        "end_line": ".*(Timing[\\s]*Path[\\s]*Group).*",
                        "begin_line": ".*(REG2REG).*"
                    },
                    "stage": "none",
                    "directory": "none"
                },
                "found_max_trans_vi": {
                    "found_section_reg_exp": {
                        "end_line": "none",
                        "begin_line": "none"
                    },
                    "metric_reg_exp": "(Max[\\s]*trans[\\s]*Violations[\\s]*):+[\\s]*([-\\d\\.]*).*",
                    "metric_name": "syn_max_trans_viols",
                    "stage": "none",
                    "directory": "none"
                },
                "found_tot_neg_slack": {
                    "metric_reg_exp": "(total[\\s]*Negative[\\s]*slack[\\s]*):+[\\s]*([-\\d\\.]*).*",
                    "metric_name": "syn_REG2REG_total_neg_slack",
                    "found_section_reg_exp": {
                        "end_line": ".*(Timing[\\s]*Path[\\s]*Group).*",
                        "begin_line": ".*(Timing[\\s]*Path[\\s]*Group).*(REG2REG).*"
                    },
                    "stage": "none",
                    "directory": "none"
                },
                "found_max_fan_vi": {
                    "found_section_reg_exp": {
                        "end_line": "none",
                        "begin_line": "none"
                    },
                    "metric_reg_exp": "(Max[\\s]*Fanout[\\s]*Violations[\\s]*):+[\\s]*([-\\d\\.]*).*",
                    "metric_name": "syn_max_fanout_viols",
                    "stage": "none",
                    "directory": "none"
                },
                "found_compile_time": {
                    "found_section_reg_exp": {
                        "end_line": "none",
                        "begin_line": "none"
                    },
                    "metric_reg_exp": "(Overall[\\s]*Compile[\\s]*Time[\\s]*):+[\\s]*([-\\d\\.\\:]*).*",
                    "metric_name": "syn_cpu_runtime",
                    "stage": "none",
                    "directory": "none"
                },
                "found_tot_hold_viol": {
                    "metric_reg_exp": "(total[\\s]*hold[\\s]*violation[\\s]*):+[\\s]*([-\\d\\.]*).*",
                    "metric_name": "syn_REG2REG_total_hold_viol",
                    "found_section_reg_exp": {
                        "end_line": ".*(Timing[\\s]*Path[\\s]*Group).*",
                        "begin_line": ".*(REG2REG).*"
                    },
                    "stage": "none",
                    "directory": "none"
                },
                "found_version": {
                    "metric_reg_exp": "(Version):[\\s]*([\\S]*)",
                    "metric_name": "syn_tool_version",
                    "found_section_reg_exp": {
                        "end_line": "none",
                        "begin_line": "none"
                    },
                    "stage": "none",
                    "directory": "none"
                },
                "found_crit_slack": {
                    "metric_reg_exp": "(Critical[\\s]*path[\\s]*slack[\\s]*):+[\\s]*([-\\d\\.]*).*",
                    "metric_name": "syn_REG2REG_worst_setup_viol",
                    "found_section_reg_exp": {
                        "end_line": ".*(Timing[\\s]*Path[\\s]*Group).*",
                        "begin_line": ".*(REG2REG).*"
                    },
                    "stage": "none",
                    "directory": "none"
                },
                "found_crit_path_length": {
                    "metric_reg_exp": "(critical[\\s]*path[\\s]*length[\\s]*):+[\\s]*([-\\d\\.]*).*",
                    "metric_name": "syn_REG2REG_critical_path_len",
                    "found_section_reg_exp": {
                        "end_line": ".*(Timing[\\s]*Path[\\s]*Group).*",
                        "begin_line": ".*(REG2REG).*"
                    },
                    "stage": "none",
                    "directory": "none"
                }
            },
            "icc.log": {},
            ".noise.qor.rpt": {
                "found_max_cap_vi": {
                    "found_section_reg_exp": {
                        "end_line": "none",
                        "begin_line": "none"
                    },
                    "metric_reg_exp": "(Max[\\s]*Cap[\\s]*Violations[\\s]*|max_capacitance[\\s]*Count):+[\\s]*([-\\d\\.]*).*",
                    "metric_name": "pv_noise_tttt_max_cap_viols",
                    "stage": "none",
                    "directory": "none"
                },
                "found_cell_count": {
                    "found_section_reg_exp":{
                        "end_line": "none",
                        "begin_line": "none"
                    },
                    "metric_reg_exp": "(leaf[\\s]*Cell[\\s]*Count[\\s]*):+[\\s]*([-\\d\\.]*).*",
                    "metric_name": "pv_noise_tttt_Cell_Count",
                    "stage": "none",
                    "directory": "none"
                },
                "found_max_trans_vi": {
                    "found_section_reg_exp": {
                        "end_line": "none",
                        "begin_line": "none"
                    },
                    "metric_reg_exp": "(Max[\\s]*trans[\\s]*Violations[\\s]*|max_transition[\\s]*Count):+[\\s]*([-\\d\\.]*).*",
                    "metric_name": "pv_noise_tttt_max_trans_viols",
                    "stage": "none",
                    "directory": "none"
                },
                "found_max_fan_vi": {
                    "found_section_reg_exp":{ 
                        "end_line": "none",
                        "begin_line": "none"
                    },
                    "metric_reg_exp": "(Max[\\s]*Fanout[\\s]*Violations[\\s]*|max_fanout[\\s]*Count):+[\\s]*([-\\d\\.]*).*",
                    "metric_name": "pv_noise_tttt_max_fanout_viols",
                    "stage": "none",
                    "directory": "none"
                },
                "found_compile_time": {
                    "found_section_reg_exp": { 
                        "end_line": "none",
                        "begin_line": "none"
                    },
                    "metric_reg_exp": "(Overall[\\s]*Compile[\\s]*Time[\\s]*):+[\\s]*([-\\d\\.]*).*",
                    "metric_name": "pv_noise_tttt_cpu_runtime",
                    "stage": "none",
                    "directory": "none"
                },
                "found_version": {
                    "metric_reg_exp": "(Version):[\\s]*([\\S]*)",
                    "metric_name": "pv_noise_tttt_tool_version",
                    "found_section_reg_exp": {
                        "end_line": "none",
                        "begin_line": "none"
                    },
                    "stage": "none",
                    "directory": "none"
                }
            },
            "denall_reuse.dp.log": {},
            ".run_time.rpt": {
                "found_run_time":{
                    "found_section_reg_exp": { 
                        "end_line": "none",
                        "begin_line": "none"
                    },
                    "metric_reg_exp": ".*(Runtime[\\s]*of[\\s]*Entire[\\s]*Timing[\\s]*Run)[\\s]*=+[\\s]*([\\d\\.]*).*",
                    "metric_name": "run_time",
                    "stage": 2,
                    "directory": "none"
				      }
        },
            "Final_Report.txt": {},
            ".cts.clock_tree.rpt": {
              "found_max_global_skew": {
                    "found_section_reg_exp": { 
                        "end_line": "none",
                        "begin_line": "none"
                    },
                    "metric_reg_exp": "(Max[\\s]*global[\\s]*skew)[\\s]*:+[\\s]*([-\\d\\.]*).*",
                    "metric_name": "apr_cts_max_global_skew",
                    "stage": "none",
                    "directory": "none"
            }
            },
            "drc_IPall.dp.log": {},
            ".power.power.rpt": {
                "found_pwr_internal": {
                    "found_section_reg_exp": { 
                        "end_line": "none",
                        "begin_line": "none"
                    },
                    "metric_reg_exp": "(Cell[\\s]*Internal[\\s]*Power)[\\s]*=+[\\s]*([-\\d\\.]*).*",
                    "metric_name": "pv_power_tttt_internal",
                    "stage": "none",
                    "directory": "none"
                },
                "found_power_leakage": {
                    "found_section_reg_exp": { 
                        "end_line": "none",
                        "begin_line": "none"
                    },
                    "metric_reg_exp": "(Cell[\\s]*Leakage[\\s]*Power)[\\s]*=+[\\s]*([-\\d\\.]*).*",
                    "metric_name": "pv_power_tttt_leakage",
                    "stage": "none",
                    "directory": "none"
                },
                "found_power_switch": {
                    "found_section_reg_exp": { 
                        "end_line": "none",
                        "begin_line": "none"
                    },
                    "metric_reg_exp": "(Net[\\s]*switching[\\s]*Power)[\\s]*=+[\\s]*([-\\d\\.]*).*",
                    "metric_name": "pv_power_tttt_switch",
                    "stage": "none",
                    "directory": "none"
                },
                "found_power_total": {
                    "found_section_reg_exp": { 
                        "end_line": "none",
                        "begin_line": "none"
                    },
                    "metric_reg_exp": "(Total[\\s]*Power)[\\s]*=+[\\s]*([-\\d\\.]*).*",
                    "metric_name": "pv_power_tttt_total",
                    "stage": "none",
                    "directory": "none"
                }
            },
            "trclvs.dp.log": {},
            ".max.qor.rpt": {
                "found_max_cap_vi": {
                    "found_section_reg_exp": { 
                        "end_line": "none",
                        "begin_line": "none"
                    },
                    "metric_reg_exp": "(Max[\\s]*Cap[\\s]*Violations[\\s]*):+[\\s]*([-\\d\\.]*).*",
                    "metric_name": "pv_max_tttt_max_cap_viols",
                    "stage": "none",
                    "directory": "none"
                },
                "found_cell_count": {
                    "found_section_reg_exp": { 
                        "end_line": "none",
                        "begin_line": "none"
                    },
                    "metric_reg_exp": "(leaf[\\s]*Cell[\\s]*Count[\\s]*):+[\\s]*([-\\d\\.]*).*",
                    "metric_name": "pv_max_tttt_Cell_Count",
                    "stage": "none",
                    "directory": "none"
                },
                "found_worst_hold_viol": {
                    "metric_reg_exp": "(Worst[\\s]*hold[\\s]*violation[\\s]*):+[\\s]*([-\\d\\.]*).*",
                    "metric_name": "pv_max_tttt_REG2REG_worst_hold_violation",
                    "found_section_reg_exp": {
                        "end_line": ".*(Timing[\\s]*Path[\\s]*Group).*",
                        "begin_line": "(Timing[\\s]*Path[\\s]*Group).*(REG2REG).*(max_delay/setup).*"
                    },
                    "stage": "none",
                    "directory": "none"
                },
                "found_max_trans_vi": {
                    "found_section_reg_exp": { 
                        "end_line": "none",
                        "begin_line": "none"
                    },
                    "metric_reg_exp": "(Max[\\s]*trans[\\s]*Violations[\\s]*):+[\\s]*([-\\d\\.]*).*",
                    "metric_name": "pv_max_tttt_max_trans_viols",
                    "stage": "none",
                    "directory": "none"
                },
                "found_tot_neg_slack": {
                    "metric_reg_exp": "(total[\\s]*Negative[\\s]*slack[\\s]*):+[\\s]*([-\\d\\.]*).*",
                    "metric_name": "pv_max_tttt_REG2REG_total_neg_slack",
                    "found_section_reg_exp": {
                        "end_line": ".*(Timing[\\s]*Path[\\s]*Group).*",
                        "begin_line": "(Timing[\\s]*Path[\\s]*Group).*(REG2REG).*(max_delay/setup).*"
                    },
                    "stage": "none",
                    "directory": "none"
                },
                "found_max_fan_vi": {
                    "found_section_reg_exp": { 
                        "end_line": "none",
                        "begin_line": "none"
                    },
                    "metric_reg_exp": "(Max[\\s]*Fanout[\\s]*Violations[\\s]*):+[\\s]*([-\\d\\.]*).*",
                    "metric_name": "pv_max_tttt_max_fanout_viols",
                    "stage": "none",
                    "directory": "none"
                },
                "found_compile_time": {
                    "found_section_reg_exp": { 
                        "end_line": "none",
                        "begin_line": "none"
                    },
                    "metric_reg_exp": "(Overall[\\s]*Compile[\\s]*Time[\\s]*):+[\\s]*([-\\d\\.]*).*",
                    "metric_name": "pv_max_tttt_cpu_runtime",
                    "stage": "none",
                    "directory": "none"
                },
                "found_tot_hold_viol": {
                    "metric_reg_exp": "(total[\\s]*hold[\\s]*violation[\\s]*):+[\\s]*([-\\d\\.]*).*",
                    "metric_name": "pv_max_tttt_REG2REG_total_hold_viol",
                    "found_section_reg_exp": {
                        "end_line": ".*(Timing[\\s]*Path[\\s]*Group).*",
                        "begin_line": "(Timing[\\s]*Path[\\s]*Group).*(REG2REG).*(max_delay/setup).*"
                    },
                    "stage": "none",
                    "directory": "none"
                },
                "found_version": {
                    "metric_reg_exp": "(Version):[\\s]*([\\S]*)",
                    "metric_name": "pv_max_tttt_tool_version",
                    "found_section_reg_exp": {
                        "end_line": "none",
                        "begin_line": "none"
                    },
                    "stage": "none",
                    "directory": "none"
                },
                "found_crit_slack": {
                    "metric_reg_exp": "(Critical[\\s]*path[\\s]*slack[\\s]*):+[\\s]*([-\\d\\.]*).*",
                    "metric_name": "pv_max_tttt_REG2REG_worst_setup_viol",
                    "found_section_reg_exp": {
                        "end_line": ".*(Timing[\\s]*Path[\\s]*Group).*",
                        "begin_line": "(Timing[\\s]*Path[\\s]*Group).*(REG2REG).*(max_delay/setup).*"
                    },
                    "stage": "none",
                    "directory": "none"
                },
                "found_crit_path_length": {
                    "metric_reg_exp": "(critical[\\s]*path[\\s]*length[\\s]*):+[\\s]*([-\\d\\.]*).*",
                    "metric_name": "pv_max_tttt_REG2REG_critical_path_len",
                    "found_section_reg_exp": {
                        "end_line": ".*(Timing[\\s]*Path[\\s]*Group).*",
                        "begin_line": "(Timing[\\s]*Path[\\s]*Group).*(REG2REG).*(max_delay/setup).*"
                    },
                    "stage": "none",
                    "directory": "none"
                }
            },
            ".fill.qor.rpt": {
                "found_max_cap_vi": {
                    "found_section_reg_exp": { 
                        "end_line": "none",
                        "begin_line": "none"
                    },
                    "metric_reg_exp": "(Max[\\s]*Cap[\\s]*Violations[\\s]*):+[\\s]*([-\\d\\.]*).*",
                    "metric_name": "apr_max_cap_viols",
                    "stage": "none",
                    "directory": "none"
                },
                "found_cell_count": {
                    "found_section_reg_exp": { 
                        "end_line": "none",
                        "begin_line": "none"
                    },
                    "metric_reg_exp": "(leaf[\\s]*Cell[\\s]*Count[\\s]*):+[\\s]*([-\\d\\.]*).*",
                    "metric_name": "apr_Cell_Count",
                    "stage": "none",
                    "directory": "none"
                },
                "found_worst_hold_viol": {
                    "metric_reg_exp": "(Worst[\\s]*hold[\\s]*violation[\\s]*):+[\\s]*([-\\d\\.]*).*",
                    "metric_name": "apr_REG2REG_worst_hold_violation",
                    "found_section_reg_exp": {
                        "end_line": ".*(Timing[\\s]*Path[\\s]*Group).*",
                        "begin_line": ".*(REG2REG).*"
                    },
                    "stage": "none",
                    "directory": "none"
                },
                "found_max_trans_vi": {
                    "found_section_reg_exp": { 
                        "end_line": "none",
                        "begin_line": "none"
                    },
                    "metric_reg_exp": "(Max[\\s]*trans[\\s]*Violations[\\s]*):+[\\s]*([-\\d\\.]*).*",
                    "metric_name": "apr_max_trans_viols",
                    "stage": "none",
                    "directory": "none"
                },
                "found_tot_neg_slack": {
                    "metric_reg_exp": "(total[\\s]*Negative[\\s]*slack[\\s]*):+[\\s]*([-\\d\\.]*).*",
                    "metric_name": "apr_REG2REG_total_neg_slack",
                    "found_section_reg_exp": {
                        "end_line": ".*(Timing[\\s]*Path[\\s]*Group).*",
                        "begin_line": ".*(REG2REG).*"
                    },
                    "stage": "none",
                    "directory": "none"
                },
                "found_max_fan_vi": {
                    "found_section_reg_exp": { 
                        "end_line": "none",
                        "begin_line": "none"
                    },
                    "metric_reg_exp": "(Max[\\s]*Fanout[\\s]*Violations[\\s]*):+[\\s]*([-\\d\\.]*).*",
                    "metric_name": "apr_max_fanout_viols",
                    "stage": "none",
                    "directory": "none"
                },
                "found_compile_time": {
                    "found_section_reg_exp": { 
                        "end_line": "none",
                        "begin_line": "none"
                    },
                    "metric_reg_exp": "(Overall[\\s]*Compile[\\s]*Time[\\s]*):+[\\s]*([-\\d\\.]*).*",
                    "metric_name": "apr_cpu_runtime",
                    "stage": "none",
                    "directory": "none"
                },
                "found_tot_hold_viol": {
                    "metric_reg_exp": "(total[\\s]*hold[\\s]*violation[\\s]*):+[\\s]*([-\\d\\.]*).*",
                    "metric_name": "apr_REG2REG_total_hold_viol",
                    "found_section_reg_exp": {
                        "end_line": ".*(Timing[\\s]*Path[\\s]*Group).*",
                        "begin_line": ".*(REG2REG).*"
                    },
                    "stage": "none",
                    "directory": "none"
                },
                "found_version": {
                    "metric_reg_exp": "(Version):[\\s]*([\\S]*)",
                    "metric_name": "apr_tool_version",
                    "found_section_reg_exp": {
                        "end_line": "none",
                        "begin_line": "none"
                    },
                    "stage": "none",
                    "directory": "none"
                },
                "found_crit_slack": {
                    "metric_reg_exp": "(Critical[\\s]*path[\\s]*slack[\\s]*):+[\\s]*([-\\d\\.]*).*",
                    "metric_name": "apr_REG2REG_worst_setup_viol",
                    "found_section_reg_exp": {
                        "end_line": ".*(Timing[\\s]*Path[\\s]*Group).*",
                        "begin_line": ".*(REG2REG).*"
                    },
                    "stage": "none",
                    "directory": "none"
                },
                "found_crit_path_length": {
                    "metric_reg_exp": "(critical[\\s]*path[\\s]*length[\\s]*):+[\\s]*([-\\d\\.]*).*",
                    "metric_name": "apr_REG2REG_critical_path_len",
                    "found_section_reg_exp": {
                        "end_line": ".*(Timing[\\s]*Path[\\s]*Group).*",
                        "begin_line": ".*(REG2REG).*"
                    },
                    "stage": "none",
                    "directory": "none"
                }
            },
            ".min.qor.rpt": {
                "found_max_cap_vi": {
                    "found_section_reg_exp": { 
                        "end_line": "none",
                        "begin_line": "none"
                    },
                    "metric_reg_exp": "(Max[\\s]*Cap[\\s]*Violations[\\s]*):+[\\s]*([-\\d\\.]*).*",
                    "metric_name": "pv_min_tttt_max_cap_viols",
                    "stage": "none",
                    "directory": "none"
                },
                "found_cell_count": {
                    "found_section_reg_exp": { 
                        "end_line": "none",
                        "begin_line": "none"
                    },
                    "metric_reg_exp": "(leaf[\\s]*Cell[\\s]*Count[\\s]*):+[\\s]*([-\\d\\.]*).*",
                    "metric_name": "pv_min_tttt_Cell_Count",
                    "stage": "none",
                    "directory": "none"
                },
                "found_worst_hold_viol": {
                    "metric_reg_exp": "(Worst[\\s]*hold[\\s]*violation[\\s]*):+[\\s]*([-\\d\\.]*).*",
                    "metric_name": "pv_min_tttt_REG2REG_worst_hold_violation",
                    "found_section_reg_exp": {
                        "end_line": ".*(Timing[\\s]*Path[\\s]*Group).*",
                        "begin_line": "(Timing[\\s]*Path[\\s]*Group).*(REG2REG).*(min_delay/hold).*"
                    },
                    "stage": "none",
                    "directory": "none"
                },
                "found_max_trans_vi": {
                    "found_section_reg_exp": { 
                        "end_line": "none",
                        "begin_line": "none"
                    },
                    "metric_reg_exp": "(Max[\\s]*trans[\\s]*Violations[\\s]*):+[\\s]*([-\\d\\.]*).*",
                    "metric_name": "pv_min_tttt_max_trans_viols",
                    "stage": "none",
                    "directory": "none"
                },
                "found_tot_neg_slack": {
                    "metric_reg_exp": "(total[\\s]*Negative[\\s]*slack[\\s]*):+[\\s]*([-\\d\\.]*).*",
                    "metric_name": "pv_min_tttt_REG2REG_total_neg_slack",
                    "found_section_reg_exp": {
                        "end_line": ".*(Timing[\\s]*Path[\\s]*Group).*",
                        "begin_line": "(Timing[\\s]*Path[\\s]*Group).*(REG2REG).*(min_delay/hold).*"
                    },
                    "stage": "none",
                    "directory": "none"
                },
                "found_max_fan_vi": {
                    "found_section_reg_exp": { 
                        "end_line": "none",
                        "begin_line": "none"
                    },
                    "metric_reg_exp": "(Max[\\s]*Fanout[\\s]*Violations[\\s]*):+[\\s]*([-\\d\\.]*).*",
                    "metric_name": "pv_min_tttt_max_fanout_viols",
                    "stage": "none",
                    "directory": "none"
                },
                "found_compile_time": {
                    "found_section_reg_exp": { 
                        "end_line": "none",
                        "begin_line": "none"
                    },
                    "metric_reg_exp": "(Overall[\\s]*Compile[\\s]*Time[\\s]*):+[\\s]*([-\\d\\.]*).*",
                    "metric_name": "pv_min_tttt_cpu_runtime",
                    "stage": "none",
                    "directory": "none"
                },
                "found_tot_hold_viol": {
                    "metric_reg_exp": "(total[\\s]*hold[\\s]*violation[\\s]*):+[\\s]*([-\\d\\.]*).*",
                    "metric_name": "pv_min_tttt_REG2REG_total_hold_viol",
                    "found_section_reg_exp": {
                        "end_line": ".*(Timing[\\s]*Path[\\s]*Group).*",
                        "begin_line": "(Timing[\\s]*Path[\\s]*Group).*(REG2REG).*(min_delay/hold).*"
                    },
                    "stage": "none",
                    "directory": "none"
                },
                "found_version": {
                    "metric_reg_exp": "(Version):[\\s]*([\\S]*)",
                    "metric_name": "pv_min_tttt_tool_version",
                    "found_section_reg_exp": {
                        "end_line": "none",
                        "begin_line": "none"
                    },
                    "stage": "none",
                    "directory": "none"
                },
                "found_crit_slack": {
                    "metric_reg_exp": "(Critical[\\s]*path[\\s]*slack[\\s]*):+[\\s]*([-\\d\\.]*).*",
                    "metric_name": "pv_min_tttt_REG2REG_worst_setup_viol",
                    "found_section_reg_exp": {
                        "end_line": ".*(Timing[\\s]*Path[\\s]*Group).*",
                        "begin_line": "(Timing[\\s]*Path[\\s]*Group).*(REG2REG).*(min_delay/hold).*"
                    },
                    "stage": "none",
                    "directory": "none"
                },
                "found_crit_path_length": {
                    "metric_reg_exp": "(critical[\\s]*path[\\s]*length[\\s]*):+[\\s]*([-\\d\\.]*).*",
                    "metric_name": "pv_min_tttt_REG2REG_critical_path_len",
                    "found_section_reg_exp": {
                        "end_line": ".*(Timing[\\s]*Path[\\s]*Group).*",
                        "begin_line": "(Timing[\\s]*Path[\\s]*Group).*(REG2REG).*(min_delay/hold).*"
                    },
                    "stage": "none",
                    "directory": "none"
                }
            },
            "dc.log":{},
			".link.rpt": {}
        }
    }
}