STIL 1.0 {
    Design 2005;
}
Header {
    Title "Minimal STIL for design `fdkex'";
    Date "Tue Mar 31 00:35:10 2015";
    Source "DFT Compiler J-2014.09";
}
Signals {
    "clk" In;
    "din0[0]" In;
    "din0[10]" In;
    "din0[11]" In;
    "din0[12]" In;
    "din0[13]" In;
    "din0[14]" In;
    "din0[15]" In;
    "din0[16]" In;
    "din0[17]" In;
    "din0[18]" In;
    "din0[19]" In;
    "din0[1]" In;
    "din0[20]" In;
    "din0[21]" In;
    "din0[22]" In;
    "din0[23]" In;
    "din0[24]" In;
    "din0[25]" In;
    "din0[26]" In;
    "din0[27]" In;
    "din0[28]" In;
    "din0[29]" In;
    "din0[2]" In;
    "din0[30]" In;
    "din0[31]" In;
    "din0[32]" In;
    "din0[33]" In;
    "din0[34]" In;
    "din0[35]" In;
    "din0[36]" In;
    "din0[37]" In;
    "din0[38]" In;
    "din0[39]" In;
    "din0[3]" In;
    "din0[40]" In;
    "din0[41]" In;
    "din0[42]" In;
    "din0[43]" In;
    "din0[44]" In;
    "din0[45]" In;
    "din0[46]" In;
    "din0[47]" In;
    "din0[48]" In;
    "din0[49]" In;
    "din0[4]" In;
    "din0[50]" In;
    "din0[51]" In;
    "din0[52]" In;
    "din0[53]" In;
    "din0[54]" In;
    "din0[55]" In;
    "din0[56]" In;
    "din0[57]" In;
    "din0[58]" In;
    "din0[59]" In;
    "din0[5]" In;
    "din0[60]" In;
    "din0[61]" In;
    "din0[62]" In;
    "din0[63]" In;
    "din0[6]" In;
    "din0[7]" In;
    "din0[8]" In;
    "din0[9]" In;
    "din1[0]" In;
    "din1[10]" In;
    "din1[11]" In;
    "din1[12]" In;
    "din1[13]" In;
    "din1[14]" In;
    "din1[15]" In;
    "din1[16]" In;
    "din1[17]" In;
    "din1[18]" In;
    "din1[19]" In;
    "din1[1]" In;
    "din1[20]" In;
    "din1[21]" In;
    "din1[22]" In;
    "din1[23]" In;
    "din1[24]" In;
    "din1[25]" In;
    "din1[26]" In;
    "din1[27]" In;
    "din1[28]" In;
    "din1[29]" In;
    "din1[2]" In;
    "din1[30]" In;
    "din1[31]" In;
    "din1[32]" In;
    "din1[33]" In;
    "din1[34]" In;
    "din1[35]" In;
    "din1[36]" In;
    "din1[37]" In;
    "din1[38]" In;
    "din1[39]" In;
    "din1[3]" In;
    "din1[40]" In;
    "din1[41]" In;
    "din1[42]" In;
    "din1[43]" In;
    "din1[44]" In;
    "din1[45]" In;
    "din1[46]" In;
    "din1[47]" In;
    "din1[48]" In;
    "din1[49]" In;
    "din1[4]" In;
    "din1[50]" In;
    "din1[51]" In;
    "din1[52]" In;
    "din1[53]" In;
    "din1[54]" In;
    "din1[55]" In;
    "din1[56]" In;
    "din1[57]" In;
    "din1[58]" In;
    "din1[59]" In;
    "din1[5]" In;
    "din1[60]" In;
    "din1[61]" In;
    "din1[62]" In;
    "din1[63]" In;
    "din1[6]" In;
    "din1[7]" In;
    "din1[8]" In;
    "din1[9]" In;
    "en_init" In;
    "en_rd0" In;
    "en_rd1" In;
    "en_rd_alu" In;
    "en_wr0" In;
    "en_wr1" In;
    "en_wr_alu" In;
    "rstb" In;
    "sel_op[0]" In;
    "sel_op[1]" In;
    "sel_op[2]" In;
    "dout[0]" Out;
    "dout[100]" Out;
    "dout[101]" Out;
    "dout[102]" Out;
    "dout[103]" Out;
    "dout[104]" Out;
    "dout[105]" Out;
    "dout[106]" Out;
    "dout[107]" Out;
    "dout[108]" Out;
    "dout[109]" Out;
    "dout[10]" Out;
    "dout[110]" Out;
    "dout[111]" Out;
    "dout[112]" Out;
    "dout[113]" Out;
    "dout[114]" Out;
    "dout[115]" Out;
    "dout[116]" Out;
    "dout[117]" Out;
    "dout[118]" Out;
    "dout[119]" Out;
    "dout[11]" Out;
    "dout[120]" Out;
    "dout[121]" Out;
    "dout[122]" Out;
    "dout[123]" Out;
    "dout[124]" Out;
    "dout[125]" Out;
    "dout[126]" Out;
    "dout[127]" Out;
    "dout[12]" Out;
    "dout[13]" Out;
    "dout[14]" Out;
    "dout[15]" Out;
    "dout[16]" Out;
    "dout[17]" Out;
    "dout[18]" Out;
    "dout[19]" Out;
    "dout[1]" Out;
    "dout[20]" Out;
    "dout[21]" Out;
    "dout[22]" Out;
    "dout[23]" Out;
    "dout[24]" Out;
    "dout[25]" Out;
    "dout[26]" Out;
    "dout[27]" Out;
    "dout[28]" Out;
    "dout[29]" Out;
    "dout[2]" Out;
    "dout[30]" Out;
    "dout[31]" Out;
    "dout[32]" Out;
    "dout[33]" Out;
    "dout[34]" Out;
    "dout[35]" Out;
    "dout[36]" Out;
    "dout[37]" Out;
    "dout[38]" Out;
    "dout[39]" Out;
    "dout[3]" Out;
    "dout[40]" Out;
    "dout[41]" Out;
    "dout[42]" Out;
    "dout[43]" Out;
    "dout[44]" Out;
    "dout[45]" Out;
    "dout[46]" Out;
    "dout[47]" Out;
    "dout[48]" Out;
    "dout[49]" Out;
    "dout[4]" Out;
    "dout[50]" Out;
    "dout[51]" Out;
    "dout[52]" Out;
    "dout[53]" Out;
    "dout[54]" Out;
    "dout[55]" Out;
    "dout[56]" Out;
    "dout[57]" Out;
    "dout[58]" Out;
    "dout[59]" Out;
    "dout[5]" Out;
    "dout[60]" Out;
    "dout[61]" Out;
    "dout[62]" Out;
    "dout[63]" Out;
    "dout[64]" Out;
    "dout[65]" Out;
    "dout[66]" Out;
    "dout[67]" Out;
    "dout[68]" Out;
    "dout[69]" Out;
    "dout[6]" Out;
    "dout[70]" Out;
    "dout[71]" Out;
    "dout[72]" Out;
    "dout[73]" Out;
    "dout[74]" Out;
    "dout[75]" Out;
    "dout[76]" Out;
    "dout[77]" Out;
    "dout[78]" Out;
    "dout[79]" Out;
    "dout[7]" Out;
    "dout[80]" Out;
    "dout[81]" Out;
    "dout[82]" Out;
    "dout[83]" Out;
    "dout[84]" Out;
    "dout[85]" Out;
    "dout[86]" Out;
    "dout[87]" Out;
    "dout[88]" Out;
    "dout[89]" Out;
    "dout[8]" Out;
    "dout[90]" Out;
    "dout[91]" Out;
    "dout[92]" Out;
    "dout[93]" Out;
    "dout[94]" Out;
    "dout[95]" Out;
    "dout[96]" Out;
    "dout[97]" Out;
    "dout[98]" Out;
    "dout[99]" Out;
    "dout[9]" Out;
    "flag_ded0" Out;
    "flag_ded1" Out;
    "flag_ded_alu" Out;
    "scan_enable" In;
    "test_tm" In;
    "test_si1" In;
    "test_si2" In;
    "test_si3" In;
    "test_so3" Out;
    "test_si4" In;
    "test_so4" Out;
    "test_si5" In;
    "test_so5" Out;
    "test_si6" In;
    "test_so6" Out;
    "test_si7" In;
    "test_so7" Out;
    "test_si8" In;
    "test_so8" Out;
    "test_si9" In;
    "test_so9" Out;
    "test_si10" In;
    "test_so10" Out;
    "test_si11" In;
    "test_so11" Out;
    "test_si12" In;
    "test_so12" Out;
    "test_si13" In;
    "test_so13" Out;
    "test_si14" In;
    "test_so14" Out;
    "test_si15" In;
    "test_so15" Out;
    "test_si16" In;
    "test_so16" Out;
    "test_si17" In;
    "test_so17" Out;
    "test_si18" In;
    "test_so18" Out;
    "test_si19" In;
    "test_so19" Out;
}
SignalGroups {
    "_si" = '"test_si1" + "test_si2" + "test_si3" + "test_si4" + "test_si5" + 
    "test_si6" + "test_si7" + "test_si8" + "test_si9" + "test_si10" + 
    "test_si11" + "test_si12" + "test_si13" + "test_si14" + "test_si15" + 
    "test_si16" + "test_si17" + "test_si18" + "test_si19"' {
        ScanIn;
    }
    "_so" = '"flag_ded0" + "flag_ded_alu" + "test_so3" + "test_so4" + "test_so5" 
    + "test_so6" + "test_so7" + "test_so8" + "test_so9" + "test_so10" + 
    "test_so11" + "test_so12" + "test_so13" + "test_so14" + "test_so15" + 
    "test_so16" + "test_so17" + "test_so18" + "test_so19"' {
        ScanOut;
    }
    "_clk" = '"clk" + "rstb"';
    "all_inputs" = '"clk" + "din0[0]" + "din0[10]" + "din0[11]" + "din0[12]" + 
    "din0[13]" + "din0[14]" + "din0[15]" + "din0[16]" + "din0[17]" + "din0[18]" 
    + "din0[19]" + "din0[1]" + "din0[20]" + "din0[21]" + "din0[22]" + "din0[23]" 
    + "din0[24]" + "din0[25]" + "din0[26]" + "din0[27]" + "din0[28]" + 
    "din0[29]" + "din0[2]" + "din0[30]" + "din0[31]" + "din0[32]" + "din0[33]" + 
    "din0[34]" + "din0[35]" + "din0[36]" + "din0[37]" + "din0[38]" + "din0[39]" 
    + "din0[3]" + "din0[40]" + "din0[41]" + "din0[42]" + "din0[43]" + "din0[44]" 
    + "din0[45]" + "din0[46]" + "din0[47]" + "din0[48]" + "din0[49]" + "din0[4]" 
    + "din0[50]" + "din0[51]" + "din0[52]" + "din0[53]" + "din0[54]" + 
    "din0[55]" + "din0[56]" + "din0[57]" + "din0[58]" + "din0[59]" + "din0[5]" + 
    "din0[60]" + "din0[61]" + "din0[62]" + "din0[63]" + "din0[6]" + "din0[7]" + 
    "din0[8]" + "din0[9]" + "din1[0]" + "din1[10]" + "din1[11]" + "din1[12]" + 
    "din1[13]" + "din1[14]" + "din1[15]" + "din1[16]" + "din1[17]" + "din1[18]" 
    + "din1[19]" + "din1[1]" + "din1[20]" + "din1[21]" + "din1[22]" + "din1[23]" 
    + "din1[24]" + "din1[25]" + "din1[26]" + "din1[27]" + "din1[28]" + 
    "din1[29]" + "din1[2]" + "din1[30]" + "din1[31]" + "din1[32]" + "din1[33]" + 
    "din1[34]" + "din1[35]" + "din1[36]" + "din1[37]" + "din1[38]" + "din1[39]" 
    + "din1[3]" + "din1[40]" + "din1[41]" + "din1[42]" + "din1[43]" + "din1[44]" 
    + "din1[45]" + "din1[46]" + "din1[47]" + "din1[48]" + "din1[49]" + "din1[4]" 
    + "din1[50]" + "din1[51]" + "din1[52]" + "din1[53]" + "din1[54]" + 
    "din1[55]" + "din1[56]" + "din1[57]" + "din1[58]" + "din1[59]" + "din1[5]" + 
    "din1[60]" + "din1[61]" + "din1[62]" + "din1[63]" + "din1[6]" + "din1[7]" + 
    "din1[8]" + "din1[9]" + "en_init" + "en_rd0" + "en_rd1" + "en_rd_alu" + 
    "en_wr0" + "en_wr1" + "en_wr_alu" + "rstb" + "sel_op[0]" + "sel_op[1]" + 
    "sel_op[2]" + "scan_enable" + "test_tm" + "test_si1" + "test_si2" + 
    "test_si3" + "test_si4" + "test_si5" + "test_si6" + "test_si7" + "test_si8" 
    + "test_si9" + "test_si10" + "test_si11" + "test_si12" + "test_si13" + 
    "test_si14" + "test_si15" + "test_si16" + "test_si17" + "test_si18" + 
    "test_si19"';
    "all_outputs" = '"dout[0]" + "dout[100]" + "dout[101]" + "dout[102]" + 
    "dout[103]" + "dout[104]" + "dout[105]" + "dout[106]" + "dout[107]" + 
    "dout[108]" + "dout[109]" + "dout[10]" + "dout[110]" + "dout[111]" + 
    "dout[112]" + "dout[113]" + "dout[114]" + "dout[115]" + "dout[116]" + 
    "dout[117]" + "dout[118]" + "dout[119]" + "dout[11]" + "dout[120]" + 
    "dout[121]" + "dout[122]" + "dout[123]" + "dout[124]" + "dout[125]" + 
    "dout[126]" + "dout[127]" + "dout[12]" + "dout[13]" + "dout[14]" + 
    "dout[15]" + "dout[16]" + "dout[17]" + "dout[18]" + "dout[19]" + "dout[1]" + 
    "dout[20]" + "dout[21]" + "dout[22]" + "dout[23]" + "dout[24]" + "dout[25]" 
    + "dout[26]" + "dout[27]" + "dout[28]" + "dout[29]" + "dout[2]" + "dout[30]" 
    + "dout[31]" + "dout[32]" + "dout[33]" + "dout[34]" + "dout[35]" + 
    "dout[36]" + "dout[37]" + "dout[38]" + "dout[39]" + "dout[3]" + "dout[40]" + 
    "dout[41]" + "dout[42]" + "dout[43]" + "dout[44]" + "dout[45]" + "dout[46]" 
    + "dout[47]" + "dout[48]" + "dout[49]" + "dout[4]" + "dout[50]" + "dout[51]" 
    + "dout[52]" + "dout[53]" + "dout[54]" + "dout[55]" + "dout[56]" + 
    "dout[57]" + "dout[58]" + "dout[59]" + "dout[5]" + "dout[60]" + "dout[61]" + 
    "dout[62]" + "dout[63]" + "dout[64]" + "dout[65]" + "dout[66]" + "dout[67]" 
    + "dout[68]" + "dout[69]" + "dout[6]" + "dout[70]" + "dout[71]" + "dout[72]" 
    + "dout[73]" + "dout[74]" + "dout[75]" + "dout[76]" + "dout[77]" + 
    "dout[78]" + "dout[79]" + "dout[7]" + "dout[80]" + "dout[81]" + "dout[82]" + 
    "dout[83]" + "dout[84]" + "dout[85]" + "dout[86]" + "dout[87]" + "dout[88]" 
    + "dout[89]" + "dout[8]" + "dout[90]" + "dout[91]" + "dout[92]" + "dout[93]" 
    + "dout[94]" + "dout[95]" + "dout[96]" + "dout[97]" + "dout[98]" + 
    "dout[99]" + "dout[9]" + "flag_ded0" + "flag_ded1" + "flag_ded_alu" + 
    "test_so3" + "test_so4" + "test_so5" + "test_so6" + "test_so7" + "test_so8" 
    + "test_so9" + "test_so10" + "test_so11" + "test_so12" + "test_so13" + 
    "test_so14" + "test_so15" + "test_so16" + "test_so17" + "test_so18" + 
    "test_so19"';
    "all_ports" = '"all_inputs" + "all_outputs"';
    "_pi" = '"clk" + "din0[0]" + "din0[10]" + "din0[11]" + "din0[12]" + 
    "din0[13]" + "din0[14]" + "din0[15]" + "din0[16]" + "din0[17]" + "din0[18]" 
    + "din0[19]" + "din0[1]" + "din0[20]" + "din0[21]" + "din0[22]" + "din0[23]" 
    + "din0[24]" + "din0[25]" + "din0[26]" + "din0[27]" + "din0[28]" + 
    "din0[29]" + "din0[2]" + "din0[30]" + "din0[31]" + "din0[32]" + "din0[33]" + 
    "din0[34]" + "din0[35]" + "din0[36]" + "din0[37]" + "din0[38]" + "din0[39]" 
    + "din0[3]" + "din0[40]" + "din0[41]" + "din0[42]" + "din0[43]" + "din0[44]" 
    + "din0[45]" + "din0[46]" + "din0[47]" + "din0[48]" + "din0[49]" + "din0[4]" 
    + "din0[50]" + "din0[51]" + "din0[52]" + "din0[53]" + "din0[54]" + 
    "din0[55]" + "din0[56]" + "din0[57]" + "din0[58]" + "din0[59]" + "din0[5]" + 
    "din0[60]" + "din0[61]" + "din0[62]" + "din0[63]" + "din0[6]" + "din0[7]" + 
    "din0[8]" + "din0[9]" + "din1[0]" + "din1[10]" + "din1[11]" + "din1[12]" + 
    "din1[13]" + "din1[14]" + "din1[15]" + "din1[16]" + "din1[17]" + "din1[18]" 
    + "din1[19]" + "din1[1]" + "din1[20]" + "din1[21]" + "din1[22]" + "din1[23]" 
    + "din1[24]" + "din1[25]" + "din1[26]" + "din1[27]" + "din1[28]" + 
    "din1[29]" + "din1[2]" + "din1[30]" + "din1[31]" + "din1[32]" + "din1[33]" + 
    "din1[34]" + "din1[35]" + "din1[36]" + "din1[37]" + "din1[38]" + "din1[39]" 
    + "din1[3]" + "din1[40]" + "din1[41]" + "din1[42]" + "din1[43]" + "din1[44]" 
    + "din1[45]" + "din1[46]" + "din1[47]" + "din1[48]" + "din1[49]" + "din1[4]" 
    + "din1[50]" + "din1[51]" + "din1[52]" + "din1[53]" + "din1[54]" + 
    "din1[55]" + "din1[56]" + "din1[57]" + "din1[58]" + "din1[59]" + "din1[5]" + 
    "din1[60]" + "din1[61]" + "din1[62]" + "din1[63]" + "din1[6]" + "din1[7]" + 
    "din1[8]" + "din1[9]" + "en_init" + "en_rd0" + "en_rd1" + "en_rd_alu" + 
    "en_wr0" + "en_wr1" + "en_wr_alu" + "rstb" + "sel_op[0]" + "sel_op[1]" + 
    "sel_op[2]" + "scan_enable" + "test_tm" + "test_si1" + "test_si2" + 
    "test_si3" + "test_si4" + "test_si5" + "test_si6" + "test_si7" + "test_si8" 
    + "test_si9" + "test_si10" + "test_si11" + "test_si12" + "test_si13" + 
    "test_si14" + "test_si15" + "test_si16" + "test_si17" + "test_si18" + 
    "test_si19"';
    "_po" = '"dout[0]" + "dout[100]" + "dout[101]" + "dout[102]" + "dout[103]" + 
    "dout[104]" + "dout[105]" + "dout[106]" + "dout[107]" + "dout[108]" + 
    "dout[109]" + "dout[10]" + "dout[110]" + "dout[111]" + "dout[112]" + 
    "dout[113]" + "dout[114]" + "dout[115]" + "dout[116]" + "dout[117]" + 
    "dout[118]" + "dout[119]" + "dout[11]" + "dout[120]" + "dout[121]" + 
    "dout[122]" + "dout[123]" + "dout[124]" + "dout[125]" + "dout[126]" + 
    "dout[127]" + "dout[12]" + "dout[13]" + "dout[14]" + "dout[15]" + "dout[16]" 
    + "dout[17]" + "dout[18]" + "dout[19]" + "dout[1]" + "dout[20]" + "dout[21]" 
    + "dout[22]" + "dout[23]" + "dout[24]" + "dout[25]" + "dout[26]" + 
    "dout[27]" + "dout[28]" + "dout[29]" + "dout[2]" + "dout[30]" + "dout[31]" + 
    "dout[32]" + "dout[33]" + "dout[34]" + "dout[35]" + "dout[36]" + "dout[37]" 
    + "dout[38]" + "dout[39]" + "dout[3]" + "dout[40]" + "dout[41]" + "dout[42]" 
    + "dout[43]" + "dout[44]" + "dout[45]" + "dout[46]" + "dout[47]" + 
    "dout[48]" + "dout[49]" + "dout[4]" + "dout[50]" + "dout[51]" + "dout[52]" + 
    "dout[53]" + "dout[54]" + "dout[55]" + "dout[56]" + "dout[57]" + "dout[58]" 
    + "dout[59]" + "dout[5]" + "dout[60]" + "dout[61]" + "dout[62]" + "dout[63]" 
    + "dout[64]" + "dout[65]" + "dout[66]" + "dout[67]" + "dout[68]" + 
    "dout[69]" + "dout[6]" + "dout[70]" + "dout[71]" + "dout[72]" + "dout[73]" + 
    "dout[74]" + "dout[75]" + "dout[76]" + "dout[77]" + "dout[78]" + "dout[79]" 
    + "dout[7]" + "dout[80]" + "dout[81]" + "dout[82]" + "dout[83]" + "dout[84]" 
    + "dout[85]" + "dout[86]" + "dout[87]" + "dout[88]" + "dout[89]" + "dout[8]" 
    + "dout[90]" + "dout[91]" + "dout[92]" + "dout[93]" + "dout[94]" + 
    "dout[95]" + "dout[96]" + "dout[97]" + "dout[98]" + "dout[99]" + "dout[9]" + 
    "flag_ded0" + "flag_ded1" + "flag_ded_alu" + "test_so3" + "test_so4" + 
    "test_so5" + "test_so6" + "test_so7" + "test_so8" + "test_so9" + "test_so10" 
    + "test_so11" + "test_so12" + "test_so13" + "test_so14" + "test_so15" + 
    "test_so16" + "test_so17" + "test_so18" + "test_so19"';
}
ScanStructures {
    ScanChain "1" {
        ScanLength 750;
        ScanIn "test_si1";
        ScanOut "flag_ded_alu";
        ScanEnable "scan_enable";
        ScanMasterClock "clk";
    }
    ScanChain "2" {
        ScanLength 750;
        ScanIn "test_si2";
        ScanOut "flag_ded0";
        ScanEnable "scan_enable";
        ScanMasterClock "clk";
    }
    ScanChain "3" {
        ScanLength 750;
        ScanIn "test_si3";
        ScanOut "test_so3";
        ScanEnable "scan_enable";
        ScanMasterClock "clk";
    }
    ScanChain "4" {
        ScanLength 750;
        ScanIn "test_si4";
        ScanOut "test_so4";
        ScanEnable "scan_enable";
        ScanMasterClock "clk";
    }
    ScanChain "5" {
        ScanLength 750;
        ScanIn "test_si5";
        ScanOut "test_so5";
        ScanEnable "scan_enable";
        ScanMasterClock "clk";
    }
    ScanChain "6" {
        ScanLength 750;
        ScanIn "test_si6";
        ScanOut "test_so6";
        ScanEnable "scan_enable";
        ScanMasterClock "clk";
    }
    ScanChain "7" {
        ScanLength 750;
        ScanIn "test_si7";
        ScanOut "test_so7";
        ScanEnable "scan_enable";
        ScanMasterClock "clk";
    }
    ScanChain "8" {
        ScanLength 750;
        ScanIn "test_si8";
        ScanOut "test_so8";
        ScanEnable "scan_enable";
        ScanMasterClock "clk";
    }
    ScanChain "9" {
        ScanLength 750;
        ScanIn "test_si9";
        ScanOut "test_so9";
        ScanEnable "scan_enable";
        ScanMasterClock "clk";
    }
    ScanChain "10" {
        ScanLength 750;
        ScanIn "test_si10";
        ScanOut "test_so10";
        ScanEnable "scan_enable";
        ScanMasterClock "clk";
    }
    ScanChain "11" {
        ScanLength 750;
        ScanIn "test_si11";
        ScanOut "test_so11";
        ScanEnable "scan_enable";
        ScanMasterClock "clk";
    }
    ScanChain "12" {
        ScanLength 750;
        ScanIn "test_si12";
        ScanOut "test_so12";
        ScanEnable "scan_enable";
        ScanMasterClock "clk";
    }
    ScanChain "13" {
        ScanLength 750;
        ScanIn "test_si13";
        ScanOut "test_so13";
        ScanEnable "scan_enable";
        ScanMasterClock "clk";
    }
    ScanChain "14" {
        ScanLength 750;
        ScanIn "test_si14";
        ScanOut "test_so14";
        ScanEnable "scan_enable";
        ScanMasterClock "clk";
    }
    ScanChain "15" {
        ScanLength 750;
        ScanIn "test_si15";
        ScanOut "test_so15";
        ScanEnable "scan_enable";
        ScanMasterClock "clk";
    }
    ScanChain "16" {
        ScanLength 750;
        ScanIn "test_si16";
        ScanOut "test_so16";
        ScanEnable "scan_enable";
        ScanMasterClock "clk";
    }
    ScanChain "17" {
        ScanLength 750;
        ScanIn "test_si17";
        ScanOut "test_so17";
        ScanEnable "scan_enable";
        ScanMasterClock "clk";
    }
    ScanChain "18" {
        ScanLength 750;
        ScanIn "test_si18";
        ScanOut "test_so18";
        ScanEnable "scan_enable";
        ScanMasterClock "clk";
    }
    ScanChain "19" {
        ScanLength 429;
        ScanIn "test_si19";
        ScanOut "test_so19";
        ScanEnable "scan_enable";
        ScanMasterClock "clk";
    }
}
Timing {
    WaveformTable "_default_WFT_" {
        Period '100ns';
        Waveforms {
            "all_inputs" {
                0 {
                    '0ns' D;
                }
            }
            "all_inputs" {
                1 {
                    '0ns' U;
                }
            }
            "all_inputs" {
                Z {
                    '0ns' Z;
                }
            }
            "all_inputs" {
                N {
                    '0ns' N;
                }
            }
            "all_outputs" {
                X {
                    '0ns' X;
                    '40ns' X;
                }
            }
            "all_outputs" {
                H {
                    '0ns' X;
                    '40ns' H;
                }
            }
            "all_outputs" {
                T {
                    '0ns' X;
                    '40ns' T;
                }
            }
            "all_outputs" {
                L {
                    '0ns' X;
                    '40ns' L;
                }
            }
            "clk" {
                P {
                    '0ns' D;
                    '45ns' U;
                    '55ns' D;
                }
            }
            "rstb" {
                P {
                    '0ns' U;
                    '45ns' D;
                    '55ns' U;
                }
            }
        }
    }
    WaveformTable "_multiclock_capture_WFT_" {
        Period '100ns';
        Waveforms {
            "all_inputs" {
                0 {
                    '0ns' D;
                }
            }
            "all_inputs" {
                1 {
                    '0ns' U;
                }
            }
            "all_inputs" {
                Z {
                    '0ns' Z;
                }
            }
            "all_inputs" {
                N {
                    '0ns' N;
                }
            }
            "all_outputs" {
                X {
                    '0ns' X;
                    '40ns' X;
                }
            }
            "all_outputs" {
                H {
                    '0ns' X;
                    '40ns' H;
                }
            }
            "all_outputs" {
                T {
                    '0ns' X;
                    '40ns' T;
                }
            }
            "all_outputs" {
                L {
                    '0ns' X;
                    '40ns' L;
                }
            }
            "clk" {
                P {
                    '0ns' D;
                    '45ns' U;
                    '55ns' D;
                }
            }
            "rstb" {
                P {
                    '0ns' U;
                    '45ns' D;
                    '55ns' U;
                }
            }
        }
    }
    WaveformTable "_allclock_capture_WFT_" {
        Period '100ns';
        Waveforms {
            "all_inputs" {
                0 {
                    '0ns' D;
                }
            }
            "all_inputs" {
                1 {
                    '0ns' U;
                }
            }
            "all_inputs" {
                Z {
                    '0ns' Z;
                }
            }
            "all_inputs" {
                N {
                    '0ns' N;
                }
            }
            "all_outputs" {
                X {
                    '0ns' X;
                    '40ns' X;
                }
            }
            "all_outputs" {
                H {
                    '0ns' X;
                    '40ns' H;
                }
            }
            "all_outputs" {
                T {
                    '0ns' X;
                    '40ns' T;
                }
            }
            "all_outputs" {
                L {
                    '0ns' X;
                    '40ns' L;
                }
            }
            "clk" {
                P {
                    '0ns' D;
                    '45ns' U;
                    '55ns' D;
                }
            }
            "rstb" {
                P {
                    '0ns' U;
                    '45ns' D;
                    '55ns' U;
                }
            }
        }
    }
    WaveformTable "_allclock_launch_WFT_" {
        Period '100ns';
        Waveforms {
            "all_inputs" {
                0 {
                    '0ns' D;
                }
            }
            "all_inputs" {
                1 {
                    '0ns' U;
                }
            }
            "all_inputs" {
                Z {
                    '0ns' Z;
                }
            }
            "all_inputs" {
                N {
                    '0ns' N;
                }
            }
            "all_outputs" {
                X {
                    '0ns' X;
                    '40ns' X;
                }
            }
            "all_outputs" {
                H {
                    '0ns' X;
                    '40ns' H;
                }
            }
            "all_outputs" {
                T {
                    '0ns' X;
                    '40ns' T;
                }
            }
            "all_outputs" {
                L {
                    '0ns' X;
                    '40ns' L;
                }
            }
            "clk" {
                P {
                    '0ns' D;
                    '45ns' U;
                    '55ns' D;
                }
            }
            "rstb" {
                P {
                    '0ns' U;
                    '45ns' D;
                    '55ns' U;
                }
            }
        }
    }
    WaveformTable "_allclock_launch_capture_WFT_" {
        Period '100ns';
        Waveforms {
            "all_inputs" {
                0 {
                    '0ns' D;
                }
            }
            "all_inputs" {
                1 {
                    '0ns' U;
                }
            }
            "all_inputs" {
                Z {
                    '0ns' Z;
                }
            }
            "all_inputs" {
                N {
                    '0ns' N;
                }
            }
            "all_outputs" {
                X {
                    '0ns' X;
                    '40ns' X;
                }
            }
            "all_outputs" {
                H {
                    '0ns' X;
                    '40ns' H;
                }
            }
            "all_outputs" {
                T {
                    '0ns' X;
                    '40ns' T;
                }
            }
            "all_outputs" {
                L {
                    '0ns' X;
                    '40ns' L;
                }
            }
            "clk" {
                P {
                    '0ns' D;
                    '45ns' U;
                    '55ns' D;
                }
            }
            "rstb" {
                P {
                    '0ns' U;
                    '45ns' D;
                    '55ns' U;
                }
            }
        }
    }
}
Procedures {
    "multiclock_capture" {
        W "_multiclock_capture_WFT_";
        C {
            "all_inputs" = 0 \r135 N 1NNNN1 \r19 N;
            "all_outputs" = \r148 X;
        }
        F {
            "test_tm" = 1;
        }
        V {
            "_pi" = \r161 #;
            "_po" = \r148 #;
        }
    }
    "allclock_capture" {
        W "_allclock_capture_WFT_";
        C {
            "all_inputs" = 0 \r135 N 1NNNN1 \r19 N;
            "all_outputs" = \r148 X;
        }
        F {
            "test_tm" = 1;
        }
        V {
            "_pi" = \r161 #;
            "_po" = \r148 #;
        }
    }
    "allclock_launch" {
        W "_allclock_launch_WFT_";
        C {
            "all_inputs" = 0 \r135 N 1NNNN1 \r19 N;
            "all_outputs" = \r148 X;
        }
        F {
            "test_tm" = 1;
        }
        V {
            "_pi" = \r161 #;
            "_po" = \r148 #;
        }
    }
    "allclock_launch_capture" {
        W "_allclock_launch_capture_WFT_";
        C {
            "all_inputs" = 0 \r135 N 1NNNN1 \r19 N;
            "all_outputs" = \r148 X;
        }
        F {
            "test_tm" = 1;
        }
        V {
            "_pi" = \r161 #;
            "_po" = \r148 #;
        }
    }
    "load_unload" {
        W "_default_WFT_";
        C {
            "all_inputs" = 0 \r135 N 1NNNN1 \r19 N;
            "all_outputs" = \r148 X;
        }
        "Internal_scan_pre_shift" : V {
            "scan_enable" = 1;
        }
        Shift {
            V {
                "_clk" = P1;
                "_si" = \r19 #;
                "_so" = \r19 #;
            }
        }
    }
}
MacroDefs {
    "test_setup" {
        W "_default_WFT_";
        C {
            "all_inputs" = \r161 N;
            "all_outputs" = \r148 X;
        }
        V {
            "clk" = 0;
            "rstb" = 1;
            "test_tm" = 1;
        }
        V {
        }
    }
}

